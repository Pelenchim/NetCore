@page
@model FrontEnd.Pages.Transactions.NewBuyModel
@{
    Layout = "_Layout";
}

<div class="container-fluid border p-4 mb-4 rounded-3">
    <div class="row mb-2">
        <div class="col">
            <p class="fw-bold">Encabezado de la Compra</p>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-4">
            <label for="ddClient" class="form-label">Proveedor</label>
            <select class="form-control form-select form-select-sm" id="ddProvider" aria-label=".form-select-sm example">
                <option value="0" selected>Seleccione</option>
            </select>
        </div>
        <div class="col-4">
            <label for="txtusername" class="form-label">Vendedor</label>
            <input type="text" class="form-control" id="txtusername" placeholder="Vendedor" value="username" disabled>
        </div>
        <div class="col-4">
            <label for="txtdate" class="form-label">Fecha</label>
            <input type="date" class="form-control" id="txtdate" placeholder="Fecha">
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-3">
            <label for="ddPaymentMethod" class="form-label">Forma de Pago</label>
            <select class="form-control form-select form-select-sm" id="ddPaymentMethod" aria-label=".form-select-sm example">
                <option value=0>Selecione</option>
                <option value=1>Contado</option>
                <option value=2>Tarjeta de Credito</option>
                <option value=3>Tarjeta de Debito</option>
            </select>
        </div>
        <div class="col-3">
            <label for="txtSubTotal" class="form-label">SubTotal</label>
            <input type="text" class="form-control" id="txtSubTotal" placeholder="SubTotal" disabled>
        </div>
        <!--<div class="col-3">
            <label for="txtDiscounts" class="form-label">Descuentos</label>
            <input type="text" class="form-control" id="txtDiscounts" placeholder="Descuentos" disabled>
        </div>-->
        <div class="col-3">
            <label for="txtTotal" class="form-label">Total</label>
            <input type="text" class="form-control" id="txtTotal" placeholder="Total" disabled>
        </div>
    </div>
</div>
<div class="container-fluid border p-4 mb-3 rounded-3">
    <div class="row mb-2">
        <div class="col-12 mb-2 d-flex justify-content-between">
            <p class="fw-bold">Detalle de la Compra</p>
            <input type="button" id="btnOpenModal" class="btn btn-success" value="Agregar Producto" />
        </div>
        <div class="col-12">
            <table class="table" id="TableItemsSale">
                <thead>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="container-fluid border p-4 rounded-3">
    <div class="row">
        <div class="col d-flex justify-content-end">
            <input type="button" value="Cancelar" class="btn btn-danger mr-2" />
            <input type="button" id="BtnSave" value="Comprar" class="btn btn-primary" />
        </div>
    </div>
</div>

<div class="modal-content" id="ModalProducts">
    <div class="modal-container">
        <div class="row mb-5 d-flex justify-content-center">
            <div class="col-6">
                <input type="text" class="form-control" id="txtsearch" placeholder="Buscar" value="" />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <table class="table" id="tableProducts">
                    <thead>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-12 d-flex justify-content-end">
                <input type="button" id="btnCloseModal" class="btn btn-danger" value="Cerrar" />
            </div>
        </div>
    </div>
</div>

<script type="module">
    import CreateTable from "../js/TableComponent.js";
    import CreateDropDown from "../js/DropDownComponent.js";
    const ItemsSale = [];
    let Items;
    const LoadData = async () => {
        let today = new Date();
        let url = "../api/Buys/GetCatalogs";
        let response = await fetch(url);
        response = await response.json();
        Items = response[0];
        CreateTable(Items, tableProducts, AddItem, "Agregar");
        CreateDropDown(response[1], ddProvider, "name", "id");
        txtusername.value = 'user@uno';

        txtsearch.onchange = (ev) => {
            const parameter = ev.target.value;
            const ItemsFiltered = Items.filter(x => x.name.includes(parameter));
            CreateTable(ItemsFiltered, tableProducts, AddItem, "Agregar");
        }
    }
    const AddItem = (Item) => {
        //console.log(Item);
        let FinalSubTotal = 0;
        let Total = 0;
        const Id = ItemsSale.find(i => i.id == Item.id);
        if (Id == undefined || Id == null) {
            let obj = {};
            obj["IdProduct"] = Item.id;
            obj["Name"] = Item.name;
            obj["Stock"] = Item.stock;
            obj["Price"] = Item.price;
            obj["Quantity"] = 1;
            obj["SubTotal"] = Item.price;
            obj["Total"] = Item.price;
            ItemsSale.push(obj);
        }
        //console.log(ItemsSale);
        const theadSale = TableItemsSale.querySelector("thead");
        const tbodySale = TableItemsSale.querySelector("tbody");
        theadSale.innerHTML = "";
        tbodySale.innerHTML = "";
        ItemsSale.forEach((Item, Index) => {
            console.log(Item);
            const row = document.createElement("tr");
            for (var prop in Item) {
                const td = document.createElement("td");
                td.innerHTML = Item[prop];
                row.append(td);
                if (Index == 0) {
                    const th = document.createElement("th");
                    let name = "";
                    switch (prop) {
                        case "IdProduct":
                            name = "Id";
                            break;
                        case "Name":
                            name = "Producto";
                            break;
                        case "Stock":
                            name = "Stock";
                            break;
                        case "Price":
                            name = "Precio";
                            break;
                        case "Quantity":
                            name = "Cantidad";
                            break;
                        case "SubTotal":
                            name = "SubTotal";
                            break;
                        case "Total":
                            name = "Total";
                            break;
                    }
                    th.innerText = name;
                    theadSale.append(th);
                }
            }
            if (Index == 0) {
                const th = document.createElement("th");
                th.innerText = "Eliminar";
                theadSale.append(th);
            }
            const tdAction = document.createElement("td");
            const btn = document.createElement("input");
            btn.className = "btn btn-primary";
            btn.type = "Button";
            btn.value = "Eliminar";
            btn.onclick = () => {
                const indexElement = ItemsSale.indexOf(Item);
                ItemsSale.splice(indexElement, 1);
                tbodySale.removeChild(row);
            }
            tdAction.append(btn);
            row.append(tdAction);
            tbodySale.append(row);

            FinalSubTotal = FinalSubTotal + Item["SubTotal"];
            Total = Total + Item["Total"];
        });
        txtSubTotal.value = FinalSubTotal;
        txtTotal.value = Total;
        modalFunction(ModalProducts);
    }
    window.onload = () => {
        BtnSave.onclick = async () => {
            const ObjIns = {
                Code: "001",
                Date: txtdate.value,
                UserName: "user@uno",
                IdProvider: parseInt(ddProvider.value),
                Total: parseFloat(txtTotal.value),
                SubTotal: parseFloat(txtSubTotal.value),
                IdPaymentMethod: parseInt(ddPaymentMethod.value),
                Detail: ItemsSale
            }
            let flag = true;
            for (var prop in ObjIns) {
                if (prop != "Detail") {
                    if (ObjIns[prop] == "") {
                        flag = false;
                        alert("la propiedad " + prop + " es requerida");
                        break;
                    }
                }
            }
            if (!flag) {
                return;
            }
            if (txtTotal.value == "") {
                alert("agregue productos");
                return;
            }
            let url = "../api/Buys/SaveBuy";
            let response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json; charset-utf-8',
                    'Accept': '*/*'
                },
                body: JSON.stringify(ObjIns)
            });
            response = await response.json();
            if (response == true) {
                window.location.href = '/Transactions/Buys';
            }
            else {
                alert("error");
            }
        }
        LoadData();
        btnOpenModal.onclick = () => {
            modalFunction(ModalProducts);
        }
        btnCloseModal.onclick = () => {
            modalFunction(ModalProducts);
        }
    }
</script>